# Week 1 Study Questions
These questions relate to the following topics:
- Core JS
- TypeScript
- Web Design
- Express

Each question will have answers in bullet point format, with possible nested items for more specific examples.

## Core JS

**Why should we use JavaScritpt? (What is it good/bad at?)**
- JS is good at event-based programming
  - Think of the stack/heap, C++ API/Web API, callback queue, and event loop 
- Live development of libraries and frameworks
  - Development goes into effect immediately and doesn't require compilation
- Conisistent front-end and back-end languages
  - JS can be used from front- to back-end (including servers with node.js)
- Convert projects and transpile projects to JS
  - Using things like TypeScript
- Supersets of JS are powerful and specific
  - Again, like TS
- It's good at handling any number of small tasks
  - Small functional programs and memory-light tasks are where JS excels
- It's bad with dealing with long running tasks
  - Long running tasks (like image processing) will bring JS to a halt

**How do we run JavaScript? Is it compiled?**
- JavaScript is not compiled, it is interpreted right from the browser or from node.js using either Web APIs or C++ APIs.
  - We can transpile it, run it as a script, or run it directly from a supporting console

**What is ES6?**
- The most supported "latest" release of JavaScript
  - ES6 feature highlights (for what we have learned):
    - `let` and `const` to replace `var`
    - Block scoping in addition to global and function scoping
    - Arrow functions (`() => {...}`)
    - String interpolation (backtick strings)
    - Classes
    - Destructuring

**What does it stand for?**
- ECMAScript 6 (AKA ECMAScript 2015, AKA ECMA-262 6th Edition)
  - ECMA is the European Computer Manufacturing Association, and is one of the major standards setting associations in the world

**What does it mean for JavaScript?**
- JS is much easier to use as an OOP language
  - Classes are now a built-in feature, for example
- It also is not supported by all browsers which means that ES5 is still important to know because of one browser (IE, of course)
  - Personal note: I wish that Microsoft would forcefully remove IE from every device.

**What is OOP?**
- Object Oriented Programming

**What are the 4 pillars?**
- Abstraction
  - Implementing a complex process in a simple manner
    - I don't need to know the inner workings of how my car works to use my car, I only want to know the how to do what I nead to
    - If I hit my gas pedal, it moves, if I hit my brake pedal, it slows down.
- Polymorphism
  - Allows one thing to be implemented in many ways
    - JS functions allow for any number of parameters to be inserted into their function calls, as well as default parameters to be set for missing parameters
    - Technically variables are polymorphic in their own right since they can take on any type at any time
- Inheritance
  - Inherit from general to specific
    - In classes, this can be done by using the `extends` keyword
    - This can also be done at any time using the `setPrototypeOf()` method available to all objects
- Encapsulation
  - Restricted control of data
    - A little more rare in JS
    - Possible to do using closures as long as there is an outer function with an inner function and inner variable that makes the inner function available after the outer function has expired

**Examples in JavaScript/TypeScript**
- Variables
  - JS: `let var1 = 'variable';`
  - TS: `let var1: string = 'variable';`
- Functions
  - JS: `function repeatCharacter(count, char) {...};`
  - TS: `function repeatCharacter(count: number, char: string) {...};`

**What is Node.js? What is it used for?**
- Node.js is a JavaScript runtime environment built on Google's V8 JS engine
- Node.js uses an event-driven, non-blocking I/O model, meaning that it can handle multiple events without having a single event stop the flow of other events
- It's used for real-time communications between the client and the servers
- It also allows fewer languages to be necessary in the tech stack, making it easier for programmers to program front or back

**What are the pieces of Node.js?**
- Chrome's V8 engine
  - This contains the stack and the heap among other things
- C++ APIs
  - Event management
- Callback queue
  - Functions that run once the stack is empty
- Event loop
  - Runs once the stack is empty, pulling instructions from the callback queue

**What is a REPL?**
- REPL is an acronym standing for "Read Evaluate Print Loop"
- REPL is a programming environment where user input is taken, read, evaluated, printed, then the process is repeated until the infinite loop is left
  - The event loop is a REPL, for instance, but in the browser, the devtools are also a REPL

**What is a garbage collector?**
- A garbage collector is a memory management system

**What is its role?**
- To remove objects (in the abstract sense, not literal) from memory

**How do we know what to collect?**
- If there is no reference to it from any part of the *running* system, then it's garbage

**What are naming conventions?**
- A way for us to standardize the way we name things across the software engineering industry for a greater understanding among professionals

**How do we name variables/functions/classes/interfaces?
- The naming conventions for JavaScript are as follows:
  - Variable and function names: camelCase
  - Constants: UNDERSCORED_UPPERCASE
  - Classes: PascalCase
  - Interfaces: IPascalCase
  - File names: lowercase-hyphens.plugin-ver.sion.filetype.js

**How do we make a variable in JavaScript?**
- There are technically 4 ways, but really only two ways that should be followed anymore
  - Bad ways:
    - `x = 'hello world'; // it hurts to write this... this should never be done ever for any reason`
    - `var x = 'hello world'; // old way`
  - Good ways:
    - `let x = 'hello world'; // 'let' allows reassigning`
    - `const x = 'hello world'; // 'const' does not allow reassigning`

**What are the scopes of variables?**
- Global - Any variable created outside of a function is considered a global variable
- Function - Any variable declared within a function, and is only accessible within that function
- Block - Any variable declared within curly braces (`{` and `}`) and is only accessible within that block

**Which variables have which scopes?**
- `var` has global and function scopes
- `let` and `const` have global, function and block scopes

**What are the types of JavaScript?**
- Object
- Boolean
- Function
- Number
- String
- Undefined
- Symbol (but we haven't learned this one yet)

**What are the differences between types for no value?**
- Assuming we're talking about the truthy-falsiness of them, the onle ones that evaluate to `false` are:
  - `false`
  - `null`
  - `undefined`
  - `0`
  - `''`
  - `NaN`
- Everything else will be truthy (including `[]` and `{}`)

**How do we make strings in JavaScript?**
- There are 3 different ways of making strings in JS:
  - `'single quotes'`
  - `"double quotes"`
  - ````template literals````

**Which way should we generally use?**
- For simple strings, single quotes are most preferred because we'll more likely need to escape double quotes than single quotes
- For dynamic strings, template literals because they allow us to insert our own code using `${...}`

**How do we declare a function in JavaScript?**
- There are two ways to declare functions:
  - For global scope and `Object.prototype` properties: `function func1(param) {...}`
  - Everywhere else: `const func1 = (param) => {...}`

**Where can we declare a function in JavaScript?**
- Almost literally anywhere.

**How do function params work?**
- Function parameters can have a default set
  - Set defaults from right to left for missing parameters
  - If a parameter wasn't given, the default parameter is used
- If too many parameters are given, the additional parameters are ignored

**What is pass by value? How does it work?**
- Pass by value means that the actual value located in memory is read and copied instead of the reference
  - This is how primitive types are read in JavaScript

**What is a callback function?**
- A function that is waiting for an event before processing
  - We might use a callback function if we need to get a resource from a remote server

**Difference between synchronous and asynchronous?**
- Synchronous means processes happen once at a time
  - JavaScript is, oddly enough, a synchronous language
- Asynchronous means multiple processes can happen concurrently
  - Node.js allows JS to be asynchronous by outsourcing some of the heavier processes to different servers that might handle the processing load better
  - Once a heavy process is complete, Node.js's API sends a callback to the callback queue and then the event loop takes care of it

**What is functional programming?**
- Another programming paradigm that (like OOP) with certain pillars that hold it up, the ones we went over are:
  - First class functions
  - Pure functions

**What are first class functions, pure functions?**
- First class functions are functions that can exist by themselves
  - That means they do not need to be a part of any class, interface or other structure
  - They are also allowed to be variables, parameters or return values of other functions
- Pure functions always give the same output for the same input
  - They have no side effects outside of their functions
  - Immutable data - "just give them a new copy"
    - Instead of mutating any data passed into them, they create a copy of the data and return the new copy (if that was the goal)

**Why do we want immutable data?**
- Immutable data not only makes testing easier, but also makes troubleshooting easier
  - If something goes wrong with functional programming and data is immutable, then you can generally pinpoint the problem very quickly

**How do we do flow control in JavaScript?**
- Using control flow statements
  - `if`, `for`, `while`, etc.

**What operators do our expressions have?**
- `==`
- `===`
- `!=`
- `!==`
- `!`
- `>`
- `>=`
- `<`
- `<=`
- `&&`
- `||`

**`==` vs `===`**
- `==` uses type coercion to see if the two operands are equal
  - `0 == '0'` evaluates to `true`
- `===` is strict equality and checks both value and type
  - `0 === '0'` evaluates to `false`

**What are truthy falsy values?**
- "Truthy" values are any values that are not listed previously regarding this topic
  - *NOT* `false`, `0`, `''`, `undefined`, `NaN` and `null`

**What are short circuit operators?**
- The `&&` and `||` operators, because once they find a value that determines their outcome, they stop further evaluation
  - For `&&`, once it finds a false value, it stops evaluation
  - For `||`, once it finds a true value, it stops evaluation

**What are the guard and default operators?**
- The `&&` and `||` operators once again
  - The `&&` operator will will return the right-most operand that evaluates to `true` first
  - The `||` operator will skip the left operand if it evaluate to `false` and go to the right operand to return that value

**How can we make objects in JavaScript?**
- There are 3 ways to make objects in JS:
  - Object literal
    - `let obja = {...};`
  - Function:
    - `function obja(name) {this.name = name}`
  - Class:
    - `Class Obja { constructor(name) {this.name = name} }`